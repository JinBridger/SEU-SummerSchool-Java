Index: server/src/main/java/app/vcampus/server/entity/Student.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package app.vcampus.server.entity;\r\n\r\nimport app.vcampus.server.enums.PoliticalStatus;\r\nimport app.vcampus.server.enums.Status;\r\nimport app.vcampus.server.utility.Request;\r\nimport app.vcampus.server.utility.Response;\r\nimport jakarta.persistence.*;\r\nimport lombok.Data;\r\nimport lombok.extern.slf4j.Slf4j;\r\n\r\nimport java.util.Map;\r\n\r\n@Entity\r\n@Data\r\n@Table(name = \"student\")\r\n@Slf4j\r\npublic class Student {\r\n    @Id\r\n    @Column(name = \"cardNumber\")\r\n    public Integer cardNumber;\r\n\r\n    @Column(nullable = false)\r\n    public String studentNumber;\r\n\r\n    public Integer major;\r\n\r\n    public Integer school;\r\n\r\n    @Enumerated(EnumType.STRING)\r\n    @Column(nullable = false)\r\n    public Status status;\r\n\r\n    public String birthPlace;\r\n\r\n    @Enumerated(EnumType.STRING)\r\n    @Column(nullable = false)\r\n    public PoliticalStatus politicalStatus;\r\n\r\n    public static Student fromRequest(Request request) {\r\n        try {\r\n            String cardNumber = request.getParams().get(\"cardNumber\");\r\n            String studentNumber = request.getParams().get(\"studentNumber\");\r\n            String major = request.getParams().get(\"major\");\r\n            String school = request.getParams().get(\"school\");\r\n            String birthPlace = request.getParams().get(\"birthPlace\");\r\n            Status status = Status.valueOf(request.getParams().get(\"status\"));\r\n            PoliticalStatus politicalStatus = PoliticalStatus.valueOf(request.getParams().get(\"politicalStatus\"));\r\n\r\n            Student student = new Student();\r\n            student.setCardNumber(Integer.valueOf(cardNumber));\r\n            student.setStudentNumber(studentNumber);\r\n            student.setMajor(Integer.valueOf(major));\r\n            student.setSchool(Integer.valueOf(school));\r\n            student.setBirthPlace(birthPlace);\r\n            student.setStatus(status);\r\n            student.setPoliticalStatus(politicalStatus);\r\n            return student;\r\n        } catch (Exception e) {\r\n            log.warn(\"Failed to parse student from request\", e);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public Response toResponse() {\r\n        Response response = Response.Common.ok();\r\n        response.setData(Map.of(\r\n            \"cardNumber\", cardNumber,\r\n            \"studentNumber\", studentNumber,\r\n            \"major\", major,\r\n            \"school\", school,\r\n            \"birthPlace\", birthPlace,\r\n            \"status\", status,\r\n            \"politicalStatus\", politicalStatus\r\n        ));\r\n        return response;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/src/main/java/app/vcampus/server/entity/Student.java b/server/src/main/java/app/vcampus/server/entity/Student.java
--- a/server/src/main/java/app/vcampus/server/entity/Student.java	(revision 4311a3413f5bc158badfe6df8ab0ac20d022ebf5)
+++ b/server/src/main/java/app/vcampus/server/entity/Student.java	(date 1693281920585)
@@ -36,42 +36,32 @@
     @Column(nullable = false)
     public PoliticalStatus politicalStatus;
 
-    public static Student fromRequest(Request request) {
+    public static Student fromMap(Map<String, String> data) {
         try {
-            String cardNumber = request.getParams().get("cardNumber");
-            String studentNumber = request.getParams().get("studentNumber");
-            String major = request.getParams().get("major");
-            String school = request.getParams().get("school");
-            String birthPlace = request.getParams().get("birthPlace");
-            Status status = Status.valueOf(request.getParams().get("status"));
-            PoliticalStatus politicalStatus = PoliticalStatus.valueOf(request.getParams().get("politicalStatus"));
-
             Student student = new Student();
-            student.setCardNumber(Integer.valueOf(cardNumber));
-            student.setStudentNumber(studentNumber);
-            student.setMajor(Integer.valueOf(major));
-            student.setSchool(Integer.valueOf(school));
-            student.setBirthPlace(birthPlace);
-            student.setStatus(status);
-            student.setPoliticalStatus(politicalStatus);
+            student.setCardNumber(Integer.parseInt(data.get("cardNumber")));
+            student.setStudentNumber(data.get("studentNumber"));
+            student.setMajor(Integer.parseInt(data.get("major")));
+            student.setSchool(Integer.parseInt(data.get("school")));
+            student.setBirthPlace(data.get("birthPlace"));
+            student.setStatus(Status.valueOf(data.get("status")));
+            student.setPoliticalStatus(PoliticalStatus.valueOf(data.get("politicalStatus")));
             return student;
         } catch (Exception e) {
-            log.warn("Failed to parse student from request", e);
+            log.warn("Failed to parse student from map: {}", data, e);
             return null;
         }
     }
 
-    public Response toResponse() {
-        Response response = Response.Common.ok();
-        response.setData(Map.of(
-            "cardNumber", cardNumber,
-            "studentNumber", studentNumber,
-            "major", major,
-            "school", school,
-            "birthPlace", birthPlace,
-            "status", status,
-            "politicalStatus", politicalStatus
-        ));
-        return response;
+    public Map<String, String> toMap() {
+        return Map.of(
+            "cardNumber", getCardNumber().toString(),
+            "studentNumber", getStudentNumber(),
+            "major", getMajor().toString(),
+            "school", getSchool().toString(),
+            "birthPlace", getBirthPlace(),
+            "status", getStatus().toString(),
+            "politicalStatus", getPoliticalStatus().toString()
+        );
     }
 }
Index: server/src/main/java/app/vcampus/server/controller/AuthController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package app.vcampus.server.controller;\r\n\r\nimport app.vcampus.server.entity.User;\r\nimport app.vcampus.server.utility.Password;\r\nimport app.vcampus.server.utility.Request;\r\nimport app.vcampus.server.utility.Response;\r\nimport app.vcampus.server.utility.Session;\r\nimport app.vcampus.server.utility.router.RouteMapping;\r\n\r\nimport java.util.Map;\r\n\r\npublic class AuthController {\r\n    @RouteMapping(uri = \"auth/login\")\r\n    public Response login(Request request, org.hibernate.Session database) {\r\n        String cardNum = request.getParams().get(\"cardNum\");\r\n        String password = request.getParams().get(\"password\");\r\n\r\n        if (cardNum == null || password == null) {\r\n            return Response.Common.badRequest();\r\n        }\r\n\r\n        User user = database.get(User.class, Integer.parseInt(cardNum));\r\n        if (user == null || !Password.verify(password, user.getPassword())) {\r\n            return Response.Common.error(\"Incorrect card number or password\");\r\n        }\r\n\r\n        Response response = Response.Common.ok();\r\n        Session session = new Session();\r\n        session.setCardNum(user.getCardNum());\r\n        session.setRoles(user.getRoles());\r\n        response.setSession(session);\r\n\r\n        try {\r\n            response.setData(Map.of(\"user\", Map.of(\r\n                    \"cardNum\", user.getCardNum().toString(),\r\n                    \"gender\", user.getGender().toString(),\r\n                    \"name\", user.getName(),\r\n                    \"phone\", user.getPhone(),\r\n                    \"email\", user.getEmail(),\r\n                    \"roles\", user.getRoleStr()\r\n            )));\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        return response;\r\n    }\r\n\r\n    @RouteMapping(uri = \"auth/logout\")\r\n    public Response logout(Request request, org.hibernate.Session database) {\r\n        Response response = Response.Common.ok();\r\n        Session session = new Session();\r\n        response.setSession(session);\r\n        return response;\r\n    }\r\n\r\n    @RouteMapping(uri = \"auth/test\", role = \"admin\")\r\n    public Response test(Request request, org.hibernate.Session database) {\r\n        return Response.Common.ok();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/src/main/java/app/vcampus/server/controller/AuthController.java b/server/src/main/java/app/vcampus/server/controller/AuthController.java
--- a/server/src/main/java/app/vcampus/server/controller/AuthController.java	(revision 4311a3413f5bc158badfe6df8ab0ac20d022ebf5)
+++ b/server/src/main/java/app/vcampus/server/controller/AuthController.java	(date 1693281920584)
@@ -31,14 +31,7 @@
         response.setSession(session);
 
         try {
-            response.setData(Map.of("user", Map.of(
-                    "cardNum", user.getCardNum().toString(),
-                    "gender", user.getGender().toString(),
-                    "name", user.getName(),
-                    "phone", user.getPhone(),
-                    "email", user.getEmail(),
-                    "roles", user.getRoleStr()
-            )));
+            response.setData(user.toMap());
         } catch (Exception e) {
             e.printStackTrace();
         }
Index: server/src/main/java/app/vcampus/server/controller/StudentStatusController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package app.vcampus.server.controller;\r\n\r\nimport app.vcampus.server.entity.Student;\r\nimport app.vcampus.server.entity.User;\r\nimport app.vcampus.server.utility.Request;\r\nimport app.vcampus.server.utility.Response;\r\nimport app.vcampus.server.utility.router.RouteMapping;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.hibernate.Transaction;\r\n\r\n@Slf4j\r\npublic class StudentStatusController {\r\n    /*\r\n    Solve client to update student status information and update to the database\r\n    The constraints are cardNumber  != null and when no such student throw exception\r\n    Test passed on 2023/08/27\r\n    Test : {\"uri\":\"student/updateInfo\",\"params\":{\"cardNumber\":\"1000\",\"studentNumber\":\"15\",\"major\":\"2\",\"school\":\"2\"}}\r\n    */\r\n    @RouteMapping(uri = \"student/updateInfo\")\r\n    public Response updateInfo(Request request, org.hibernate.Session database) {\r\n        Student newStudent = Student.fromRequest(request);\r\n\r\n        if (newStudent == null) {\r\n            return Response.Common.badRequest();\r\n        }\r\n\r\n        Student student = database.get(Student.class, newStudent.getCardNumber());\r\n        if (student == null) {\r\n            return Response.Common.error(\"Incorrect card number\");\r\n        }\r\n\r\n        Transaction tx = database.beginTransaction();\r\n        student.setStudentNumber(newStudent.getStudentNumber());\r\n        student.setMajor(newStudent.getMajor());\r\n        student.setSchool(newStudent.getSchool());\r\n        student.setStatus(newStudent.getStatus());\r\n        student.setBirthPlace(newStudent.getBirthPlace());\r\n        student.setPoliticalStatus(newStudent.getPoliticalStatus());\r\n        database.persist(student);\r\n        tx.commit();\r\n        return Response.Common.ok();\r\n    }\r\n\r\n    /*\r\n    Solve client to add student status information and update to the database\r\n    The constraints are cardNumber and studentNumber != null\r\n    Test passed on 2023/08/27\r\n    Test : {\"uri\":\"student/addInfo\",\"params\":{\"cardNumber\":\"999\",\"studentNumber\":\"15\",\"birthPlace\":\"SEU\"}}\r\n     */\r\n    @RouteMapping(uri = \"student/addInfo\")\r\n    public Response addInfo(Request request, org.hibernate.Session database) {\r\n        Student newStudent = Student.fromRequest(request);\r\n        if (newStudent == null) {\r\n            return Response.Common.badRequest();\r\n        }\r\n\r\n        User user = database.get(User.class, newStudent.getCardNumber());\r\n        if (user == null) {\r\n            return Response.Common.error(\"User not found\");\r\n        }\r\n\r\n        Transaction tx = database.beginTransaction();\r\n        database.persist(newStudent);\r\n        tx.commit();\r\n\r\n        return Response.Common.ok();\r\n    }\r\n\r\n    /*\r\n    Solve client to delete student status information and update to the database\r\n    The constraints : cardNumber  != null  && database have the student's cardNumber\r\n    Test passed on 2023/08/27\r\n    */\r\n    @RouteMapping(uri = \"student/deleteInfo\")\r\n    public Response deleteInfo(Request request, org.hibernate.Session database) {\r\n        String cardNumber = request.getParams().get(\"cardNumber\");\r\n\r\n        if (cardNumber == null) {\r\n            return Response.Common.error(\"card number cannot be empty\");\r\n        }\r\n\r\n        Student student = database.get(Student.class, Integer.parseInt(cardNumber));\r\n\r\n        if (student == null) {\r\n            return Response.Common.error(\"no such card number\");\r\n        }\r\n\r\n        Transaction tx = database.beginTransaction();\r\n        database.remove(student);\r\n        tx.commit();\r\n\r\n        return Response.Common.ok();\r\n    }\r\n\r\n\r\n    /*\r\n    Solve client to search student status information and update to the database\r\n    The constraints : cardNumber  != null  && database have the student's cardNumber\r\n    Test passed on 2023/08/27\r\n    Test:{\"uri\":\"student/searchInfo\",\"params\":{\"cardNumber\":\"250\"}}\r\n    */\r\n    @RouteMapping(uri = \"student/searchInfo\")\r\n    public Response searchInfo(Request request, org.hibernate.Session database) {\r\n        String cardNumber = request.getParams().get(\"cardNumber\");\r\n\r\n        if (cardNumber == null) {\r\n            return Response.Common.error(\"card number cannot be empty\");\r\n        }\r\n\r\n        Student student = database.get(Student.class, Integer.parseInt(cardNumber));\r\n\r\n        if (student == null) {\r\n            return Response.Common.error(\"no such card number\");\r\n        }\r\n\r\n        System.out.println(student);\r\n\r\n        return student.toResponse();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/src/main/java/app/vcampus/server/controller/StudentStatusController.java b/server/src/main/java/app/vcampus/server/controller/StudentStatusController.java
--- a/server/src/main/java/app/vcampus/server/controller/StudentStatusController.java	(revision 4311a3413f5bc158badfe6df8ab0ac20d022ebf5)
+++ b/server/src/main/java/app/vcampus/server/controller/StudentStatusController.java	(date 1693281920584)
@@ -18,7 +18,7 @@
     */
     @RouteMapping(uri = "student/updateInfo")
     public Response updateInfo(Request request, org.hibernate.Session database) {
-        Student newStudent = Student.fromRequest(request);
+        Student newStudent = Student.fromMap(request.getParams());
 
         if (newStudent == null) {
             return Response.Common.badRequest();
@@ -49,7 +49,7 @@
      */
     @RouteMapping(uri = "student/addInfo")
     public Response addInfo(Request request, org.hibernate.Session database) {
-        Student newStudent = Student.fromRequest(request);
+        Student newStudent = Student.fromMap(request.getParams());
         if (newStudent == null) {
             return Response.Common.badRequest();
         }
@@ -115,6 +115,21 @@
 
         System.out.println(student);
 
-        return student.toResponse();
+        return Response.Common.ok(student.toMap());
+    }
+
+    @RouteMapping(uri = "student/getSelf", role = "student")
+    public Response getSelf(Request request, org.hibernate.Session database) {
+        Integer cardNumber = request.getSession().getCardNum();
+
+        Student student = database.get(Student.class, cardNumber);
+
+        if (student == null) {
+            return Response.Common.error("no such card number");
+        }
+
+        System.out.println(student);
+
+        return Response.Common.ok(student.toMap());
     }
 }
\ No newline at end of file
Index: server/src/main/java/app/vcampus/server/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package app.vcampus.server;\r\n\r\nimport app.vcampus.server.controller.AuthController;\r\nimport app.vcampus.server.controller.IndexController;\r\nimport app.vcampus.server.controller.LibraryBookController;\r\nimport app.vcampus.server.controller.StudentStatusController;\r\nimport app.vcampus.server.net.NettyServer;\r\nimport app.vcampus.server.utility.Database;\r\nimport app.vcampus.server.utility.router.Router;\r\nimport org.hibernate.Session;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) throws Exception {\r\n        Router router = new Router();\r\n        router.addController(AuthController.class);\r\n        router.addController(IndexController.class);\r\n        router.addController(StudentStatusController.class);\r\n        router.addController(LibraryBookController.class);\r\n\r\n        Session database = Database.init();\r\n\r\n//        Transaction tx = database.beginTransaction();\r\n//        User user = new User();\r\n//        user.setCardNum(123456);\r\n//        user.setName(\"admin\");\r\n//        user.setGender(Gender.unspecified);\r\n//        user.setPassword(Password.hash(\"123456\"));\r\n//        user.setEmail(\"admin@seu.edu.cn\");\r\n//        user.setRoles(new String[]{\"admin\"});\r\n//        database.persist(user);\r\n//        tx.commit();\r\n\r\n        NettyServer server = new NettyServer(9091);\r\n        server.run(router, database);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/src/main/java/app/vcampus/server/Main.java b/server/src/main/java/app/vcampus/server/Main.java
--- a/server/src/main/java/app/vcampus/server/Main.java	(revision 4311a3413f5bc158badfe6df8ab0ac20d022ebf5)
+++ b/server/src/main/java/app/vcampus/server/Main.java	(date 1693281920583)
@@ -4,10 +4,14 @@
 import app.vcampus.server.controller.IndexController;
 import app.vcampus.server.controller.LibraryBookController;
 import app.vcampus.server.controller.StudentStatusController;
+import app.vcampus.server.entity.User;
+import app.vcampus.server.enums.Gender;
 import app.vcampus.server.net.NettyServer;
 import app.vcampus.server.utility.Database;
+import app.vcampus.server.utility.Password;
 import app.vcampus.server.utility.router.Router;
 import org.hibernate.Session;
+import org.hibernate.Transaction;
 
 public class Main {
     public static void main(String[] args) throws Exception {
@@ -27,6 +31,7 @@
 //        user.setPassword(Password.hash("123456"));
 //        user.setEmail("admin@seu.edu.cn");
 //        user.setRoles(new String[]{"admin"});
+//        user.setPhone("12345678901");
 //        database.persist(user);
 //        tx.commit();
 
Index: server/src/main/java/app/vcampus/server/entity/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package app.vcampus.server.entity;\r\n\r\nimport app.vcampus.server.enums.Gender;\r\nimport jakarta.persistence.*;\r\nimport lombok.Data;\r\n\r\n@Entity\r\n@Data\r\n@Table(name = \"user\")\r\npublic class User {\r\n    @Id\r\n    @Column(name = \"card_number\")\r\n    public Integer cardNum;\r\n\r\n    @Column(nullable = false)\r\n    public String password;\r\n\r\n    @Column(nullable = false)\r\n    public String name;\r\n\r\n    @Enumerated(EnumType.STRING)\r\n    @Column(nullable = false)\r\n    public Gender gender;\r\n\r\n    @Column(nullable = false)\r\n    public String phone;\r\n    @Column(nullable = false)\r\n    public String email;\r\n\r\n    @Column(name = \"role\")\r\n    public String roleStr;\r\n\r\n    public String[] getRoles() {\r\n        return roleStr.split(\",\");\r\n    }\r\n\r\n    public void setRoles(String[] roles) {\r\n        this.roleStr = String.join(\",\", roles);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/src/main/java/app/vcampus/server/entity/User.java b/server/src/main/java/app/vcampus/server/entity/User.java
--- a/server/src/main/java/app/vcampus/server/entity/User.java	(revision 4311a3413f5bc158badfe6df8ab0ac20d022ebf5)
+++ b/server/src/main/java/app/vcampus/server/entity/User.java	(date 1693281920586)
@@ -3,9 +3,13 @@
 import app.vcampus.server.enums.Gender;
 import jakarta.persistence.*;
 import lombok.Data;
+import lombok.extern.slf4j.Slf4j;
+
+import java.util.Map;
 
 @Entity
 @Data
+@Slf4j
 @Table(name = "user")
 public class User {
     @Id
@@ -37,4 +41,31 @@
     public void setRoles(String[] roles) {
         this.roleStr = String.join(",", roles);
     }
+
+    public static User fromMap(Map<String, String> data) {
+        try {
+            User user = new User();
+            user.setCardNum(Integer.parseInt(data.get("cardNum")));
+            user.setName(data.get("name"));
+            user.setGender(Gender.valueOf(data.get("gender")));
+            user.setPhone(data.get("phone"));
+            user.setEmail(data.get("email"));
+            user.setRoles(data.get("roles").split(","));
+            return user;
+        } catch (Exception e) {
+            log.warn("Failed to parse user from map: {}", data, e);
+            return null;
+        }
+    }
+
+    public Map<String, String> toMap() {
+        return Map.of(
+                "cardNum", getCardNum().toString(),
+                "gender", getGender().toString(),
+                "name", getName(),
+                "phone", getPhone(),
+                "email", getEmail(),
+                "roles", getRoleStr()
+        );
+    }
 }
Index: client/src/main/kotlin/app/vcampus/client/scene/components/NavDrawer.kt
===================================================================
diff --git a/client/src/main/kotlin/app/vcampus/client/scene/components/NavDrawer.kt b/client/src/main/kotlin/app/vcampus/client/scene/components/NavDrawer.kt
deleted file mode 100644
--- a/client/src/main/kotlin/app/vcampus/client/scene/components/NavDrawer.kt	(revision 4311a3413f5bc158badfe6df8ab0ac20d022ebf5)
+++ /dev/null	(revision 4311a3413f5bc158badfe6df8ab0ac20d022ebf5)
@@ -1,50 +0,0 @@
-package app.vcampus.client.scene.components
-
-import androidx.compose.foundation.clickable
-import androidx.compose.foundation.layout.Box
-import androidx.compose.foundation.layout.Column
-import androidx.compose.foundation.layout.fillMaxHeight
-import androidx.compose.foundation.layout.height
-import androidx.compose.foundation.lazy.LazyColumn
-import androidx.compose.material.ExperimentalMaterialApi
-import androidx.compose.material.Icon
-import androidx.compose.material.ListItem
-import androidx.compose.material.Text
-import androidx.compose.material.icons.Icons
-import androidx.compose.material.icons.filled.Person
-import androidx.compose.runtime.Composable
-import androidx.compose.ui.Modifier
-import androidx.compose.ui.graphics.vector.ImageVector
-import androidx.compose.ui.unit.dp
-import app.vcampus.client.Navis
-import moe.tlaster.precompose.navigation.Navigator
-
-@OptIn(ExperimentalMaterialApi::class)
-@Composable
-fun navDrawerItem(text: String, icon:ImageVector, onClick: () -> Unit) {
-    ListItem(
-        Modifier.clickable { onClick() },
-        text = { Text(text) },
-        icon = {Icon(
-            icon,
-            contentDescription = null
-        )}
-    )
-}
-
-@Composable
-fun navDrawer(navigator: Navigator) {
-    Column {
-        Box(Modifier.height(200.dp)) {  }
-        LazyColumn(Modifier.fillMaxHeight()) {
-            item {
-                Navis.forEach {
-                    navDrawerItem(it.name, it.icon) {
-                        navigator.navigate(it.path)
-                    }
-                }
-            }
-        }
-    }
-
-}
\ No newline at end of file
Index: client/.run/desktop.run.xml
===================================================================
diff --git a/client/.run/desktop.run.xml b/client/.run/desktop.run.xml
deleted file mode 100644
--- a/client/.run/desktop.run.xml	(revision 4311a3413f5bc158badfe6df8ab0ac20d022ebf5)
+++ /dev/null	(revision 4311a3413f5bc158badfe6df8ab0ac20d022ebf5)
@@ -1,21 +0,0 @@
-<component name="ProjectRunConfigurationManager">
-    <configuration default="false" name="desktop" type="GradleRunConfiguration" factoryName="Gradle">
-        <ExternalSystemSettings>
-            <option name="executionName"/>
-            <option name="externalProjectPath" value="$PROJECT_DIR$"/>
-            <option name="externalSystemIdString" value="GRADLE"/>
-            <option name="scriptParameters" value=""/>
-            <option name="taskDescriptions">
-                <list/>
-            </option>
-            <option name="taskNames">
-                <list>
-                    <option value="run"/>
-                </list>
-            </option>
-            <option name="vmOptions" value=""/>
-        </ExternalSystemSettings>
-        <GradleScriptDebugEnabled>true</GradleScriptDebugEnabled>
-        <method v="2"/>
-    </configuration>
-</component>
\ No newline at end of file
Index: client/src/main/kotlin/app/vcampus/client/scene/components/NavShape.kt
===================================================================
diff --git a/client/src/main/kotlin/app/vcampus/client/scene/components/NavShape.kt b/client/src/main/kotlin/app/vcampus/client/scene/components/NavShape.kt
deleted file mode 100644
--- a/client/src/main/kotlin/app/vcampus/client/scene/components/NavShape.kt	(revision 4311a3413f5bc158badfe6df8ab0ac20d022ebf5)
+++ /dev/null	(revision 4311a3413f5bc158badfe6df8ab0ac20d022ebf5)
@@ -1,32 +0,0 @@
-package app.vcampus.client.scene.components
-
-import androidx.compose.ui.geometry.Offset
-import androidx.compose.ui.geometry.Rect
-import androidx.compose.ui.geometry.Size
-import androidx.compose.ui.graphics.Outline
-import androidx.compose.ui.graphics.Shape
-import androidx.compose.ui.unit.Density
-import androidx.compose.ui.unit.Dp
-import androidx.compose.ui.unit.LayoutDirection
-
-class NavShape(
-    private val widthOffset: Dp,
-    private val scale: Float
-) : Shape {
-
-    override fun createOutline(
-        size: Size,
-        layoutDirection: LayoutDirection,
-        density: Density
-    ): Outline {
-        return Outline.Rectangle(
-            Rect(
-                Offset.Zero,
-                Offset(
-                    size.width * scale + with(density) { widthOffset.toPx() },
-                    size.height
-                )
-            )
-        )
-    }
-}
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"13b06e68-b3fb-4616-99c1-c60110386ba5\" name=\"更改\" comment=\"\">\r\n      <change afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/server/src/main/java/app/vcampus/server/controller/LibraryBookController.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/server/src/main/java/app/vcampus/server/entity/LibraryBook.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/server/src/main/java/app/vcampus/server/enums/BookStatus.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/.gitignore\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/gradle.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/gradle.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/kotlinc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/kotlinc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/server/src/main/java/app/vcampus/server/Main.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/server/src/main/java/app/vcampus/server/Main.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"ExternalProjectsData\">\r\n    <projectState path=\"$PROJECT_DIR$\">\r\n      <ProjectState />\r\n    </projectState>\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Enum\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;customColor&quot;: &quot;&quot;,\r\n  &quot;associatedIndex&quot;: 2\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2UbM955ZVRwicz1lm5EwNstuOS1\" />\r\n  <component name=\"ProjectLevelVcsManager\">\r\n    <ConfirmationsSetting value=\"1\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;master&quot;,\r\n    &quot;project.structure.last.edited&quot;: &quot;模块&quot;,\r\n    &quot;project.structure.proportion&quot;: &quot;0.0&quot;,\r\n    &quot;project.structure.side.proportion&quot;: &quot;0.0&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RunManager\" selected=\"应用程序.Application\">\r\n    <configuration name=\"Application\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"app.vcampus.client.Application\" />\r\n      <module name=\"vcampus.client.main\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"app.vcampus.client.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Main\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"app.vcampus.server.Main\" />\r\n      <module name=\"vcampus.server.main\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"app.vcampus.server.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"应用程序.Application\" />\r\n        <item itemvalue=\"应用程序.Main\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"应用程序级\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"默认任务\">\r\n      <changelist id=\"13b06e68-b3fb-4616-99c1-c60110386ba5\" name=\"更改\" comment=\"\" />\r\n      <created>1693203674555</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1693203674555</updated>\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State>\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"master\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 4311a3413f5bc158badfe6df8ab0ac20d022ebf5)
+++ b/.idea/workspace.xml	(date 1693281951224)
@@ -5,15 +5,27 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="13b06e68-b3fb-4616-99c1-c60110386ba5" name="更改" comment="">
-      <change afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/server/src/main/java/app/vcampus/server/controller/LibraryBookController.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/server/src/main/java/app/vcampus/server/entity/LibraryBook.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/server/src/main/java/app/vcampus/server/enums/BookStatus.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/.gitignore" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/gradle.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/gradle.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/kotlinc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/kotlinc.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/client/.run/desktop.run.xml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/client/build.gradle.kts" beforeDir="false" afterPath="$PROJECT_DIR$/client/build.gradle.kts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/client/src/main/java/app/vcampus/client/gateway/AuthClient.java" beforeDir="false" afterPath="$PROJECT_DIR$/client/src/main/java/app/vcampus/client/gateway/AuthClient.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/client/src/main/kotlin/app/vcampus/client/repository/FakeRepository.kt" beforeDir="false" afterPath="$PROJECT_DIR$/client/src/main/kotlin/app/vcampus/client/repository/FakeRepository.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/client/src/main/kotlin/app/vcampus/client/scene/LoginScene.kt" beforeDir="false" afterPath="$PROJECT_DIR$/client/src/main/kotlin/app/vcampus/client/scene/LoginScene.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/client/src/main/kotlin/app/vcampus/client/scene/MainPanelScene.kt" beforeDir="false" afterPath="$PROJECT_DIR$/client/src/main/kotlin/app/vcampus/client/scene/MainPanelScene.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/client/src/main/kotlin/app/vcampus/client/scene/StudentStatusScene.kt" beforeDir="false" afterPath="$PROJECT_DIR$/client/src/main/kotlin/app/vcampus/client/scene/StudentStatusScene.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/client/src/main/kotlin/app/vcampus/client/scene/components/NavDrawer.kt" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/client/src/main/kotlin/app/vcampus/client/scene/components/NavShape.kt" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/client/src/main/kotlin/app/vcampus/client/viewmodel/LoginViewModel.kt" beforeDir="false" afterPath="$PROJECT_DIR$/client/src/main/kotlin/app/vcampus/client/viewmodel/LoginViewModel.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/client/src/main/kotlin/app/vcampus/client/viewmodel/StudentStatusViewModel.kt" beforeDir="false" afterPath="$PROJECT_DIR$/client/src/main/kotlin/app/vcampus/client/viewmodel/StudentStatusViewModel.kt" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server/build.gradle.kts" beforeDir="false" afterPath="$PROJECT_DIR$/server/build.gradle.kts" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/server/src/main/java/app/vcampus/server/Main.java" beforeDir="false" afterPath="$PROJECT_DIR$/server/src/main/java/app/vcampus/server/Main.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server/src/main/java/app/vcampus/server/controller/AuthController.java" beforeDir="false" afterPath="$PROJECT_DIR$/server/src/main/java/app/vcampus/server/controller/AuthController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server/src/main/java/app/vcampus/server/controller/StudentStatusController.java" beforeDir="false" afterPath="$PROJECT_DIR$/server/src/main/java/app/vcampus/server/controller/StudentStatusController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server/src/main/java/app/vcampus/server/entity/Student.java" beforeDir="false" afterPath="$PROJECT_DIR$/server/src/main/java/app/vcampus/server/entity/Student.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server/src/main/java/app/vcampus/server/entity/User.java" beforeDir="false" afterPath="$PROJECT_DIR$/server/src/main/java/app/vcampus/server/entity/User.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server/src/main/java/app/vcampus/server/utility/Database.java" beforeDir="false" afterPath="$PROJECT_DIR$/server/src/main/java/app/vcampus/server/utility/Database.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server/src/main/java/app/vcampus/server/utility/Password.java" beforeDir="false" afterPath="$PROJECT_DIR$/server/src/main/java/app/vcampus/server/utility/Password.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server/src/main/java/app/vcampus/server/utility/Response.java" beforeDir="false" afterPath="$PROJECT_DIR$/server/src/main/java/app/vcampus/server/utility/Response.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -24,6 +36,21 @@
     <projectState path="$PROJECT_DIR$">
       <ProjectState />
     </projectState>
+  </component>
+  <component name="ExternalProjectsManager">
+    <system id="GRADLE">
+      <state>
+        <task path="$PROJECT_DIR$">
+          <activation />
+        </task>
+        <projects_view>
+          <tree_state>
+            <expand />
+            <select />
+          </tree_state>
+        </projects_view>
+      </state>
+    </system>
   </component>
   <component name="FileTemplateManagerImpl">
     <option name="RECENT_TEMPLATES">
@@ -48,16 +75,17 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent">{
-  &quot;keyToString&quot;: {
-    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
-    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
-    &quot;git-widget-placeholder&quot;: &quot;master&quot;,
-    &quot;project.structure.last.edited&quot;: &quot;模块&quot;,
-    &quot;project.structure.proportion&quot;: &quot;0.0&quot;,
-    &quot;project.structure.side.proportion&quot;: &quot;0.0&quot;
+  <component name="PropertiesComponent"><![CDATA[{
+  "keyToString": {
+    "RunOnceActivity.OpenProjectViewOnStart": "true",
+    "RunOnceActivity.ShowReadmeOnStart": "true",
+    "git-widget-placeholder": "master",
+    "project.structure.last.edited": "模块",
+    "project.structure.proportion": "0.0",
+    "project.structure.side.proportion": "0.0",
+    "settings.editor.selected.configurable": "Errors"
   }
-}</component>
+}]]></component>
   <component name="RunManager" selected="应用程序.Application">
     <configuration name="Application" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
       <option name="MAIN_CLASS_NAME" value="app.vcampus.client.Application" />
@@ -126,4 +154,8 @@
       </map>
     </option>
   </component>
+  <component name="XSLT-Support.FileAssociations.UIState">
+    <expand />
+    <select />
+  </component>
 </project>
\ No newline at end of file
Index: server/src/main/java/app/vcampus/server/utility/Database.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package app.vcampus.server.utility;\r\n\r\nimport app.vcampus.server.entity.Student;\r\nimport app.vcampus.server.entity.User;\r\nimport org.hibernate.Session;\r\nimport org.hibernate.cfg.Configuration;\r\n\r\npublic class Database {\r\n    public static Session init() {\r\n        Configuration configuration = new Configuration().configure();\r\n        return configuration\r\n                .addAnnotatedClass(User.class)\r\n                .addAnnotatedClass(Student.class)\r\n                .buildSessionFactory().openSession();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/src/main/java/app/vcampus/server/utility/Database.java b/server/src/main/java/app/vcampus/server/utility/Database.java
--- a/server/src/main/java/app/vcampus/server/utility/Database.java	(revision 4311a3413f5bc158badfe6df8ab0ac20d022ebf5)
+++ b/server/src/main/java/app/vcampus/server/utility/Database.java	(date 1693281920587)
@@ -1,5 +1,6 @@
 package app.vcampus.server.utility;
 
+import app.vcampus.server.entity.Course;
 import app.vcampus.server.entity.Student;
 import app.vcampus.server.entity.User;
 import org.hibernate.Session;
@@ -11,6 +12,7 @@
         return configuration
                 .addAnnotatedClass(User.class)
                 .addAnnotatedClass(Student.class)
+                .addAnnotatedClass(Course.class)
                 .buildSessionFactory().openSession();
     }
 }
Index: server/src/main/java/app/vcampus/server/utility/Response.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package app.vcampus.server.utility;\r\n\r\nimport lombok.Data;\r\nimport lombok.NonNull;\r\nimport lombok.RequiredArgsConstructor;\r\n\r\nimport java.util.UUID;\r\n\r\n@Data\r\n@RequiredArgsConstructor\r\npublic class Response {\r\n    UUID id;\r\n    @NonNull String status;\r\n    @NonNull String message;\r\n\r\n    Object data;\r\n    transient Session session = null;\r\n\r\n    public static class Common {\r\n        public static Response ok() {\r\n            return new Response(\"success\", \"OK\");\r\n        }\r\n\r\n        public static Response error(String message) {\r\n            return new Response(\"error\", message);\r\n        }\r\n\r\n        public static Response permissionDenied() {\r\n            return new Response(\"error\", \"Permission denied\");\r\n        }\r\n\r\n        public static Response badRequest() {\r\n            return new Response(\"error\", \"Bad request\");\r\n        }\r\n\r\n        public static Response notFound() {\r\n            return new Response(\"error\", \"Not found\");\r\n        }\r\n\r\n        public static Response internalError() {\r\n            return new Response(\"error\", \"Internal error\");\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/src/main/java/app/vcampus/server/utility/Response.java b/server/src/main/java/app/vcampus/server/utility/Response.java
--- a/server/src/main/java/app/vcampus/server/utility/Response.java	(revision 4311a3413f5bc158badfe6df8ab0ac20d022ebf5)
+++ b/server/src/main/java/app/vcampus/server/utility/Response.java	(date 1693281920589)
@@ -4,6 +4,7 @@
 import lombok.NonNull;
 import lombok.RequiredArgsConstructor;
 
+import java.util.Map;
 import java.util.UUID;
 
 @Data
@@ -21,6 +22,12 @@
             return new Response("success", "OK");
         }
 
+        public static Response ok(Map<String, String> data) {
+            Response response = new Response("success", "OK");
+            response.setData(data);
+            return response;
+        }
+
         public static Response error(String message) {
             return new Response("error", message);
         }
Index: client/build.gradle.kts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import org.jetbrains.compose.desktop.application.dsl.TargetFormat\r\nimport org.jetbrains.kotlin.gradle.dsl.JvmTarget\r\n\r\nplugins {\r\n    id(\"java\")\r\n    kotlin(\"jvm\") version \"1.9.0\"\r\n    id(\"org.jetbrains.compose\") version \"1.4.3\"\r\n    id(\"io.freefair.lombok\") version \"8.2.2\"\r\n    kotlin(\"plugin.lombok\") version \"1.9.0\"\r\n}\r\n\r\ngroup = \"app.vcampus\"\r\nversion = \"1.0-SNAPSHOT\"\r\n\r\nrepositories {\r\n    mavenCentral()\r\n    maven(\"https://maven.pkg.jetbrains.space/public/p/compose/dev\")\r\n    google()\r\n}\r\n\r\ndependencies {\r\n    implementation(project(\":server\"))\r\n\r\n    // Note, if you develop a library, you should use compose.desktop.common.\r\n    // compose.desktop.currentOs should be used in launcher-sourceSet\r\n    // (in a separate module for demo project and in testMain).\r\n    // With compose.desktop.common you will also lose @Preview functionality\r\n    implementation(compose.desktop.currentOs)\r\n    api(compose.foundation)\r\n    api(compose.animation)\r\n    implementation(\"io.netty:netty-all:4.1.97.Final\")\r\n    implementation(\"com.google.code.gson:gson:2.10.1\")\r\n\r\n    val precompose_version = \"1.4.3\"\r\n    implementation(\"org.jetbrains.compose.material:material-icons-extended-desktop:1.4.3\")\r\n\r\n    api(\"moe.tlaster:precompose:$precompose_version\")\r\n\r\n// api(\"moe.tlaster:precompose-molecule:$precompose_version\") // For Molecule intergration\r\n\r\n    api(\"moe.tlaster:precompose-viewmodel:$precompose_version\") // For ViewModel intergration\r\n\r\n//    val voyagerVersion = \"1.0.0-rc06\"\r\n//\r\n//    // Multiplatform\r\n//\r\n//    // Navigator\r\n//    implementation(\"cafe.adriel.voyager:voyager-navigator:$voyagerVersion\")\r\n//\r\n//    // BottomSheetNavigator\r\n//    implementation(\"cafe.adriel.voyager:voyager-bottom-sheet-navigator:$voyagerVersion\")\r\n//\r\n//    // TabNavigator\r\n//    implementation(\"cafe.adriel.voyager:voyager-tab-navigator:$voyagerVersion\")\r\n//\r\n//    // Transitions\r\n//    implementation(\"cafe.adriel.voyager:voyager-transitions:$voyagerVersion\")\r\n}\r\n\r\nkotlin {\r\n    compilerOptions {\r\n        jvmTarget.set(JvmTarget.JVM_17)\r\n    }\r\n}\r\n\r\ncompose.desktop {\r\n    application {\r\n//        mainClass = \"MainKt\"\r\n//        mainClass = \"app.vcampus.client.MainKt\"\r\n\r\n        nativeDistributions {\r\n            targetFormats(TargetFormat.Dmg, TargetFormat.Msi, TargetFormat.Deb)\r\n            packageName = \"client\"\r\n            packageVersion = \"1.0.0\"\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client/build.gradle.kts b/client/build.gradle.kts
--- a/client/build.gradle.kts	(revision 4311a3413f5bc158badfe6df8ab0ac20d022ebf5)
+++ b/client/build.gradle.kts	(date 1693281920578)
@@ -75,3 +75,17 @@
         }
     }
 }
+
+tasks.withType<Jar> {
+    manifest {
+        attributes["Main-Class"] = "app.vcampus.client.Application"
+    }
+
+    doFirst {
+        from(configurations.runtimeClasspath.get().map { if (it.isDirectory) it else zipTree(it) })
+
+        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
+    }
+
+    exclude("META-INF/*.RSA", "META-INF/*.SF", "META-INF/*.DSA")
+}
Index: server/src/main/java/app/vcampus/server/utility/Password.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package app.vcampus.server.utility;\r\n\r\nimport org.springframework.security.crypto.argon2.Argon2PasswordEncoder;\r\n\r\npublic class Password {\r\n    public static Argon2PasswordEncoder encoder() {\r\n        return new Argon2PasswordEncoder(16, 32, 1, 60000, 10);\r\n    }\r\n\r\n    public static String hash(String password) {\r\n        return encoder().encode(password);\r\n    }\r\n\r\n    public static boolean verify(String password, String hashed) {\r\n        return encoder().matches(password, hashed);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/src/main/java/app/vcampus/server/utility/Password.java b/server/src/main/java/app/vcampus/server/utility/Password.java
--- a/server/src/main/java/app/vcampus/server/utility/Password.java	(revision 4311a3413f5bc158badfe6df8ab0ac20d022ebf5)
+++ b/server/src/main/java/app/vcampus/server/utility/Password.java	(date 1693281920588)
@@ -4,7 +4,7 @@
 
 public class Password {
     public static Argon2PasswordEncoder encoder() {
-        return new Argon2PasswordEncoder(16, 32, 1, 60000, 10);
+        return new Argon2PasswordEncoder(16, 32, 1, 1 << 12, 3);
     }
 
     public static String hash(String password) {
Index: client/src/main/kotlin/app/vcampus/client/viewmodel/LoginViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package app.vcampus.client.viewmodel\r\n\r\nimport app.vcampus.client.repository.FakeRepository\r\nimport moe.tlaster.precompose.viewmodel.ViewModel\r\n\r\nclass LoginViewModel() : ViewModel() {\r\n    fun login(username: String, password: String): Boolean {\r\n        return FakeRepository.login(username, password)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client/src/main/kotlin/app/vcampus/client/viewmodel/LoginViewModel.kt b/client/src/main/kotlin/app/vcampus/client/viewmodel/LoginViewModel.kt
--- a/client/src/main/kotlin/app/vcampus/client/viewmodel/LoginViewModel.kt	(revision 4311a3413f5bc158badfe6df8ab0ac20d022ebf5)
+++ b/client/src/main/kotlin/app/vcampus/client/viewmodel/LoginViewModel.kt	(date 1693281920581)
@@ -1,10 +1,22 @@
 package app.vcampus.client.viewmodel
 
+import androidx.compose.runtime.mutableStateOf
 import app.vcampus.client.repository.FakeRepository
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.flow.flow
+import kotlinx.coroutines.launch
+import kotlinx.coroutines.withContext
 import moe.tlaster.precompose.viewmodel.ViewModel
+import moe.tlaster.precompose.viewmodel.viewModelScope
 
-class LoginViewModel() : ViewModel() {
-    fun login(username: String, password: String): Boolean {
-        return FakeRepository.login(username, password)
+class LoginViewModel : ViewModel() {
+    val loginState = mutableStateOf(false)
+
+    fun login(username: String, password: String) {
+        viewModelScope.launch {
+            withContext(Dispatchers.Default) {
+                loginState.value = FakeRepository.login(username, password)
+            }
+        }
     }
 }
\ No newline at end of file
Index: client/src/main/kotlin/app/vcampus/client/repository/FakeRepository.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package app.vcampus.client.repository\r\n\r\nimport app.vcampus.server.entity.User\r\nimport app.vcampus.client.gateway.AuthClient\r\nimport app.vcampus.client.net.NettyHandler\r\n\r\nobject FakeRepository {\r\n    private lateinit var handler: NettyHandler;\r\n    lateinit var user: User;\r\n\r\n    fun setHandler(handler: NettyHandler) {\r\n        this.handler = handler\r\n    }\r\n\r\n    fun login(username: String, password: String): Boolean {\r\n        val user = AuthClient.login(handler, username, password)\r\n\r\n        user?.let {\r\n            print(it)\r\n            this.user = it\r\n            return true\r\n        }\r\n\r\n        return false\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client/src/main/kotlin/app/vcampus/client/repository/FakeRepository.kt b/client/src/main/kotlin/app/vcampus/client/repository/FakeRepository.kt
--- a/client/src/main/kotlin/app/vcampus/client/repository/FakeRepository.kt	(revision 4311a3413f5bc158badfe6df8ab0ac20d022ebf5)
+++ b/client/src/main/kotlin/app/vcampus/client/repository/FakeRepository.kt	(date 1693281920579)
@@ -2,7 +2,9 @@
 
 import app.vcampus.server.entity.User
 import app.vcampus.client.gateway.AuthClient
+import app.vcampus.client.gateway.StudentStatusClient
 import app.vcampus.client.net.NettyHandler
+import app.vcampus.server.entity.Student
 
 object FakeRepository {
     private lateinit var handler: NettyHandler;
@@ -23,4 +25,8 @@
 
         return false
     }
+
+    fun getSelf(): Student {
+        return StudentStatusClient.getSelf(handler)
+    }
 }
\ No newline at end of file
Index: server/build.gradle.kts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\r\n    id(\"java\")\r\n    id(\"io.freefair.lombok\") version \"8.2.2\"\r\n}\r\n\r\ngroup = \"app.vcampus\"\r\nversion = \"1.0-SNAPSHOT\"\r\n\r\nrepositories {\r\n    mavenCentral()\r\n}\r\n\r\ndependencies {\r\n    implementation(\"io.netty:netty-all:4.1.97.Final\")\r\n    implementation(\"com.google.code.gson:gson:2.10.1\")\r\n    implementation(\"org.slf4j:slf4j-api:2.0.7\")\r\n    implementation(\"org.slf4j:jcl-over-slf4j:2.0.7\")\r\n    implementation(\"ch.qos.logback:logback-core:1.4.11\")\r\n    implementation(\"ch.qos.logback:logback-classic:1.4.11\")\r\n    implementation(\"org.hibernate.orm:hibernate-core:6.2.7.Final\")\r\n    implementation(\"mysql:mysql-connector-java:8.0.33\")\r\n    implementation(\"org.springframework.security:spring-security-crypto:6.1.3\")\r\n    implementation(\"org.bouncycastle:bcprov-jdk18on:1.76\")\r\n\r\n    testImplementation(platform(\"org.junit:junit-bom:5.9.1\"))\r\n    testImplementation(\"org.junit.jupiter:junit-jupiter\")\r\n}\r\n\r\ntasks.test {\r\n    useJUnitPlatform()\r\n}\r\n\r\ntasks.register<Jar>(\"uberJar\") {\r\n    archiveClassifier.set(\"uber\")\r\n\r\n    from(sourceSets.main.get().output)\r\n\r\n    dependsOn(configurations.runtimeClasspath)\r\n    from({\r\n        configurations.runtimeClasspath.get().filter { it.name.endsWith(\"jar\") }.map { zipTree(it) }\r\n    })\r\n}\r\n\r\ntasks.withType<Jar> {\r\n    manifest {\r\n        attributes[\"Main-Class\"] = \"app.vcampus.server.Main\"\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/build.gradle.kts b/server/build.gradle.kts
--- a/server/build.gradle.kts	(revision 4311a3413f5bc158badfe6df8ab0ac20d022ebf5)
+++ b/server/build.gradle.kts	(date 1693281920583)
@@ -30,19 +30,33 @@
     useJUnitPlatform()
 }
 
-tasks.register<Jar>("uberJar") {
-    archiveClassifier.set("uber")
-
-    from(sourceSets.main.get().output)
-
-    dependsOn(configurations.runtimeClasspath)
-    from({
-        configurations.runtimeClasspath.get().filter { it.name.endsWith("jar") }.map { zipTree(it) }
-    })
-}
+//tasks.register<Jar>("uberJar") {
+//    archiveClassifier.set("uber")
+//
+//    from(sourceSets.main.get().output)
+//
+//    dependsOn(configurations.runtimeClasspath)
+//    from({
+//        configurations.runtimeClasspath.get().filter { it.name.endsWith("jar") }.map { zipTree(it) }
+//    })
+//}
+//
+//tasks.withType<Jar> {
+//    manifest {
+//        attributes["Main-Class"] = "app.vcampus.server.Main"
+//    }
+//}
 
 tasks.withType<Jar> {
     manifest {
         attributes["Main-Class"] = "app.vcampus.server.Main"
     }
+
+    doFirst {
+        from(configurations.runtimeClasspath.get().map { if (it.isDirectory) it else zipTree(it) })
+
+        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
+    }
+
+    exclude("META-INF/*.RSA", "META-INF/*.SF", "META-INF/*.DSA")
 }
Index: client/src/main/kotlin/app/vcampus/client/viewmodel/StudentStatusViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package app.vcampus.client.viewmodel\r\n\r\nimport moe.tlaster.precompose.viewmodel.ViewModel\r\n\r\nclass StudentStatusViewModel(): ViewModel() {\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client/src/main/kotlin/app/vcampus/client/viewmodel/StudentStatusViewModel.kt b/client/src/main/kotlin/app/vcampus/client/viewmodel/StudentStatusViewModel.kt
--- a/client/src/main/kotlin/app/vcampus/client/viewmodel/StudentStatusViewModel.kt	(revision 4311a3413f5bc158badfe6df8ab0ac20d022ebf5)
+++ b/client/src/main/kotlin/app/vcampus/client/viewmodel/StudentStatusViewModel.kt	(date 1693281920582)
@@ -1,7 +1,37 @@
 package app.vcampus.client.viewmodel
 
+import androidx.compose.runtime.mutableStateOf
+import app.vcampus.client.repository.FakeRepository
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.launch
+import kotlinx.coroutines.withContext
 import moe.tlaster.precompose.viewmodel.ViewModel
+import moe.tlaster.precompose.viewmodel.viewModelScope
+import java.util.*
 
-class StudentStatusViewModel(): ViewModel() {
+class StudentStatusViewModel() : ViewModel() {
+    val familyName = mutableStateOf("")
+    val givenName = mutableStateOf("")
+    val gender = mutableStateOf("")
+    val birthDate = mutableStateOf(Date())
+    val major = mutableStateOf("")
+    val school = mutableStateOf("")
+    val cardNumber = mutableStateOf("")
+    val studentNumber = mutableStateOf("")
 
+    init {
+        getStudentStatus()
+    }
+
+    fun getStudentStatus() {
+        viewModelScope.launch {
+            withContext(Dispatchers.Default) {
+                val student = FakeRepository.getSelf()
+                println("wtfisthis: ")
+                println(student.toString())
+                cardNumber.value = student.getCardNumber().toString()
+                studentNumber.value = student.getStudentNumber().toString()
+            }
+        }
+    }
 }
\ No newline at end of file
Index: client/src/main/kotlin/app/vcampus/client/scene/LoginScene.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package app.vcampus.client.scene\r\n\r\nimport androidx.compose.foundation.Image\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.layout.*\r\nimport androidx.compose.material.*\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.Visibility\r\nimport androidx.compose.material.icons.filled.VisibilityOff\r\nimport androidx.compose.runtime.*\r\nimport androidx.compose.runtime.saveable.rememberSaveable\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.shadow\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.res.painterResource\r\nimport androidx.compose.ui.text.TextStyle\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.input.PasswordVisualTransformation\r\nimport androidx.compose.ui.text.input.VisualTransformation\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport app.vcampus.client.viewmodel.LoginViewModel\r\nimport moe.tlaster.precompose.viewmodel.viewModel\r\n\r\n\r\n@ExperimentalMaterialApi\r\n@Composable\r\nfun LoginScene(\r\n    onLogin: () -> Unit,\r\n) {\r\n    val viewModel = viewModel(LoginViewModel::class, listOf()) {\r\n        LoginViewModel()\r\n    }\r\n\r\n    var username by remember { mutableStateOf(\"\") }\r\n    var password by rememberSaveable { mutableStateOf(\"\") }\r\n    var passwordVisible by rememberSaveable { mutableStateOf(false) }\r\n\r\n    Box(Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {\r\n        Box(Modifier.shadow(elevation = 10.dp).size(1064.dp, 600.dp).background(Color.White)) {\r\n            Row {\r\n                Image(\r\n                    painterResource(\"seu-side.png\"),\r\n                    contentDescription = \"SEU Sidebar\",\r\n                    modifier = Modifier.width(600.dp).height(600.dp)\r\n                )\r\n\r\n                Row(\r\n                    modifier = Modifier\r\n                        .fillMaxWidth(),\r\n                    horizontalArrangement = Arrangement.Center,\r\n                ) {\r\n                    Box(\r\n                        modifier = Modifier\r\n                            .requiredWidth(328.dp)\r\n                            .fillMaxHeight()\r\n                    ) {\r\n                        Column(\r\n                            modifier = Modifier.fillMaxSize(),\r\n                            verticalArrangement = Arrangement.spacedBy(16.dp, Alignment.CenterVertically)\r\n                        ) {\r\n                            Column {\r\n                                Text(\r\n                                    text = \"统一登录验证\",\r\n                                    style = TextStyle(\r\n                                        fontSize = 34.sp,\r\n                                        lineHeight = 36.sp,\r\n                                        fontWeight = FontWeight(700),\r\n                                        color = Color(0xDE000000),\r\n                                        textAlign = TextAlign.Start,\r\n                                    )\r\n                                )\r\n\r\n                                Text(\r\n                                    text = \"VCampus\",\r\n                                    style = TextStyle(\r\n                                        fontSize = 14.sp,\r\n                                        lineHeight = 20.sp,\r\n                                        fontWeight = FontWeight(400),\r\n                                        color = Color(0x99000000),\r\n                                        letterSpacing = 0.25.sp,\r\n                                    )\r\n                                )\r\n                            }\r\n\r\n                            Column(\r\n                                verticalArrangement = Arrangement.spacedBy(8.dp, Alignment.CenterVertically)\r\n                            ) {\r\n                                OutlinedTextField(\r\n                                    value = username,\r\n                                    onValueChange = { username = it },\r\n                                    label = { Text(\"一卡通号\") },\r\n                                    modifier = Modifier.fillMaxWidth()\r\n                                )\r\n\r\n                                OutlinedTextField(\r\n                                    value = password,\r\n                                    onValueChange = { password = it },\r\n                                    label = { Text(\"密码\") },\r\n                                    visualTransformation = if (passwordVisible) VisualTransformation.None else PasswordVisualTransformation(),\r\n                                    modifier = Modifier.fillMaxWidth(),\r\n                                    trailingIcon = {\r\n                                        val image = if (passwordVisible)\r\n                                            Icons.Filled.Visibility\r\n                                        else Icons.Filled.VisibilityOff\r\n\r\n                                        // Please provide localized description for accessibility services\r\n                                        val description = if (passwordVisible) \"隐藏密码\" else \"显示密码\"\r\n\r\n                                        IconButton(onClick = { passwordVisible = !passwordVisible }) {\r\n                                            Icon(image, description)\r\n                                        }\r\n                                    }\r\n                                )\r\n                            }\r\n\r\n                            Row(\r\n                                modifier = Modifier.fillMaxWidth(),\r\n                                horizontalArrangement = Arrangement.SpaceBetween\r\n                            ) {\r\n                                TextButton(\r\n                                    onClick = {\r\n                                        println(\"忘记密码\")\r\n                                    }\r\n                                ) {\r\n                                    Text(\"忘记密码？\")\r\n                                }\r\n\r\n                                Button(\r\n                                    onClick = {\r\n                                        if (viewModel.login(username, password)) {\r\n                                            println(\"successful!\")\r\n                                            onLogin()\r\n                                        } else {\r\n                                            println(\"failed!\")\r\n                                        }\r\n                                    }\r\n                                ) {\r\n                                    Text(\"登录\")\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client/src/main/kotlin/app/vcampus/client/scene/LoginScene.kt b/client/src/main/kotlin/app/vcampus/client/scene/LoginScene.kt
--- a/client/src/main/kotlin/app/vcampus/client/scene/LoginScene.kt	(revision 4311a3413f5bc158badfe6df8ab0ac20d022ebf5)
+++ b/client/src/main/kotlin/app/vcampus/client/scene/LoginScene.kt	(date 1693281920580)
@@ -37,6 +37,12 @@
     var username by remember { mutableStateOf("") }
     var password by rememberSaveable { mutableStateOf("") }
     var passwordVisible by rememberSaveable { mutableStateOf(false) }
+    val loginState by viewModel.loginState
+
+    when (loginState) {
+        true -> onLogin()
+        false -> {}
+    }
 
     Box(Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
         Box(Modifier.shadow(elevation = 10.dp).size(1064.dp, 600.dp).background(Color.White)) {
@@ -130,12 +136,14 @@
 
                                 Button(
                                     onClick = {
-                                        if (viewModel.login(username, password)) {
-                                            println("successful!")
-                                            onLogin()
-                                        } else {
-                                            println("failed!")
-                                        }
+                                        viewModel.login(username, password)
+
+//                                        if (viewModel.login(username, password)) {
+//                                            println("successful!")
+//                                            onLogin()
+//                                        } else {
+//                                            println("failed!")
+//                                        }
                                     }
                                 ) {
                                     Text("登录")
Index: client/src/main/kotlin/app/vcampus/client/scene/MainPanelScene.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package app.vcampus.client.scene\r\n\r\nimport androidx.compose.foundation.layout.*\r\nimport androidx.compose.foundation.lazy.LazyColumn\r\nimport androidx.compose.material.*\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.Edit\r\nimport androidx.compose.material.icons.filled.Menu\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.rememberCoroutineScope\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.geometry.Offset\r\nimport androidx.compose.ui.geometry.Rect\r\nimport androidx.compose.ui.geometry.Size\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.graphics.Outline\r\nimport androidx.compose.ui.graphics.Shape\r\nimport androidx.compose.ui.text.TextStyle\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.unit.*\r\nimport app.vcampus.client.repository.FakeRepository\r\nimport app.vcampus.client.scene.components.NavShape\r\nimport app.vcampus.client.scene.components.navDrawer\r\nimport app.vcampus.client.viewmodel.MainPanelViewModel\r\nimport kotlinx.coroutines.launch\r\nimport moe.tlaster.precompose.navigation.Navigator\r\nimport moe.tlaster.precompose.navigation.rememberNavigator\r\nimport moe.tlaster.precompose.viewmodel.viewModel\r\n\r\n\r\n@ExperimentalMaterialApi\r\n@Composable\r\nfun MainPanelScene(\r\n    navi: Navigator,\r\n) {\r\n    val viewModel = viewModel(MainPanelViewModel::class, listOf()) {\r\n        MainPanelViewModel()\r\n    }\r\n    val coroutineScope = rememberCoroutineScope()\r\n    val scaffoldState = rememberScaffoldState()\r\n\r\n    Scaffold(\r\n        scaffoldState = scaffoldState,\r\n        topBar = {\r\n            TopAppBar(\r\n                title = {\r\n                    Text(\r\n                        text = \"欢迎来到 VCampus 自助服务大厅！\",\r\n                        style = TextStyle(\r\n                            fontSize = 20.sp,\r\n                            lineHeight = 24.sp,\r\n                            fontWeight = FontWeight(600),\r\n                            color = Color(0xFFFFFFFF),\r\n                            letterSpacing = 0.15.sp,\r\n                        )\r\n                    )\r\n                },\r\n                navigationIcon = {\r\n                    IconButton(onClick = { coroutineScope.launch { scaffoldState.drawerState.open() } }) {\r\n                        Icon(Icons.Default.Menu, contentDescription = null)\r\n                    }\r\n                },\r\n                actions = {\r\n                    IconButton(onClick = {}) {\r\n                        Icon(Icons.Default.Edit, contentDescription = null)\r\n                    }\r\n                },\r\n            )\r\n        },\r\n        drawerShape = NavShape(0.dp, 0.3f),\r\n        drawerContent = {\r\n            navDrawer(navi)\r\n        }\r\n    ) {\r\n        Box(Modifier.fillMaxSize()) {\r\n            Box(Modifier.width(800.dp).align(Alignment.TopCenter)) {\r\n                LazyColumn {\r\n                    item {\r\n                        Spacer(Modifier.height(50.dp))\r\n                        Text(\r\n                            text = \"晚上好，${FakeRepository.user.name}\",\r\n                            style = TextStyle(\r\n                                fontSize = 34.sp,\r\n                                lineHeight = 36.sp,\r\n                                fontWeight = FontWeight(400),\r\n                                color = Color(0xDE000000),\r\n                            )\r\n                        )\r\n                        Text(\r\n                            text = \"今天想做些什么？\",\r\n                            style = TextStyle(\r\n                                fontSize = 14.sp,\r\n                                lineHeight = 20.sp,\r\n                                fontWeight = FontWeight(400),\r\n                                color = Color(0x99000000),\r\n                                letterSpacing = 0.25.sp,\r\n                            )\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client/src/main/kotlin/app/vcampus/client/scene/MainPanelScene.kt b/client/src/main/kotlin/app/vcampus/client/scene/MainPanelScene.kt
--- a/client/src/main/kotlin/app/vcampus/client/scene/MainPanelScene.kt	(revision 4311a3413f5bc158badfe6df8ab0ac20d022ebf5)
+++ b/client/src/main/kotlin/app/vcampus/client/scene/MainPanelScene.kt	(date 1693281920580)
@@ -10,22 +10,16 @@
 import androidx.compose.runtime.rememberCoroutineScope
 import androidx.compose.ui.Alignment
 import androidx.compose.ui.Modifier
-import androidx.compose.ui.geometry.Offset
-import androidx.compose.ui.geometry.Rect
-import androidx.compose.ui.geometry.Size
 import androidx.compose.ui.graphics.Color
-import androidx.compose.ui.graphics.Outline
-import androidx.compose.ui.graphics.Shape
 import androidx.compose.ui.text.TextStyle
 import androidx.compose.ui.text.font.FontWeight
 import androidx.compose.ui.unit.*
 import app.vcampus.client.repository.FakeRepository
-import app.vcampus.client.scene.components.NavShape
-import app.vcampus.client.scene.components.navDrawer
+import app.vcampus.client.scene.components.NavRail
+import app.vcampus.client.scene.components.TopBar
 import app.vcampus.client.viewmodel.MainPanelViewModel
 import kotlinx.coroutines.launch
 import moe.tlaster.precompose.navigation.Navigator
-import moe.tlaster.precompose.navigation.rememberNavigator
 import moe.tlaster.precompose.viewmodel.viewModel
 
 
@@ -43,64 +37,40 @@
     Scaffold(
         scaffoldState = scaffoldState,
         topBar = {
-            TopAppBar(
-                title = {
-                    Text(
-                        text = "欢迎来到 VCampus 自助服务大厅！",
-                        style = TextStyle(
-                            fontSize = 20.sp,
-                            lineHeight = 24.sp,
-                            fontWeight = FontWeight(600),
-                            color = Color(0xFFFFFFFF),
-                            letterSpacing = 0.15.sp,
-                        )
-                    )
-                },
-                navigationIcon = {
-                    IconButton(onClick = { coroutineScope.launch { scaffoldState.drawerState.open() } }) {
-                        Icon(Icons.Default.Menu, contentDescription = null)
-                    }
-                },
-                actions = {
-                    IconButton(onClick = {}) {
-                        Icon(Icons.Default.Edit, contentDescription = null)
-                    }
-                },
-            )
-        },
-        drawerShape = NavShape(0.dp, 0.3f),
-        drawerContent = {
-            navDrawer(navi)
+            TopBar("欢迎来到自助服务大厅！")
         }
     ) {
-        Box(Modifier.fillMaxSize()) {
-            Box(Modifier.width(800.dp).align(Alignment.TopCenter)) {
-                LazyColumn {
-                    item {
-                        Spacer(Modifier.height(50.dp))
-                        Text(
-                            text = "晚上好，${FakeRepository.user.name}",
-                            style = TextStyle(
-                                fontSize = 34.sp,
-                                lineHeight = 36.sp,
-                                fontWeight = FontWeight(400),
-                                color = Color(0xDE000000),
-                            )
-                        )
-                        Text(
-                            text = "今天想做些什么？",
-                            style = TextStyle(
-                                fontSize = 14.sp,
-                                lineHeight = 20.sp,
-                                fontWeight = FontWeight(400),
-                                color = Color(0x99000000),
-                                letterSpacing = 0.25.sp,
-                            )
-                        )
+        Row {
+            NavRail(navi, "/home")
+
+            Box(Modifier.fillMaxSize()) {
+                Box(Modifier.width(800.dp).align(Alignment.TopCenter)) {
+                    LazyColumn {
+                        item {
+                            Spacer(Modifier.height(50.dp))
+                            Text(
+                                text = "晚上好，${FakeRepository.user.name}",
+                                style = TextStyle(
+                                    fontSize = 34.sp,
+                                    lineHeight = 36.sp,
+                                    fontWeight = FontWeight(400),
+                                    color = Color(0xDE000000),
+                                )
+                            )
+                            Text(
+                                text = "今天想做些什么？",
+                                style = TextStyle(
+                                    fontSize = 14.sp,
+                                    lineHeight = 20.sp,
+                                    fontWeight = FontWeight(400),
+                                    color = Color(0x99000000),
+                                    letterSpacing = 0.25.sp,
+                                )
+                            )
+                        }
                     }
                 }
             }
         }
-
     }
 }
\ No newline at end of file
Index: client/src/main/java/app/vcampus/client/gateway/AuthClient.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package app.vcampus.client.gateway;\r\n\r\nimport app.vcampus.server.entity.User;\r\nimport app.vcampus.server.enums.Gender;\r\nimport app.vcampus.client.net.NettyHandler;\r\nimport app.vcampus.client.utility.Request;\r\nimport app.vcampus.client.utility.Response;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.concurrent.CountDownLatch;\r\nimport java.util.concurrent.atomic.AtomicReference;\r\n\r\nimport static com.google.gson.internal.$Gson$Types.arrayOf;\r\n\r\npublic class AuthClient {\r\n    public static User login(NettyHandler handler, String username, String password) {\r\n        CountDownLatch latch = new CountDownLatch(1);\r\n        AtomicReference<Response> response = new AtomicReference<>();\r\n        Request request = new Request();\r\n        request.setUri(\"auth/login\");\r\n        request.setParams(Map.of(\r\n                \"cardNum\", username,\r\n                \"password\", password\r\n        ));\r\n        handler.sendRequest(request, res -> {\r\n            response.set(res);\r\n            System.out.println(res);\r\n            latch.countDown();\r\n        });\r\n\r\n        try {\r\n            latch.await();\r\n        } catch (InterruptedException e) {\r\n            e.printStackTrace();\r\n            return null;\r\n        }\r\n\r\n        if (response.get().getStatus().equals(\"success\")) {\r\n            User user = new User();\r\n            Map<String, String> data = (Map<String, String>) ((Map<String, Object>) response.get().getData()).get(\"user\");\r\n            user.setCardNum(Integer.parseInt(data.get(\"cardNum\")));\r\n            user.setName(data.get(\"name\"));\r\n            user.setGender(Gender.valueOf(data.get(\"gender\")));\r\n            user.setPhone(data.get(\"phone\"));\r\n            user.setEmail(data.get(\"email\"));\r\n            user.setRoles(data.get(\"roles\").split(\",\"));\r\n            return user;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client/src/main/java/app/vcampus/client/gateway/AuthClient.java b/client/src/main/java/app/vcampus/client/gateway/AuthClient.java
--- a/client/src/main/java/app/vcampus/client/gateway/AuthClient.java	(revision 4311a3413f5bc158badfe6df8ab0ac20d022ebf5)
+++ b/client/src/main/java/app/vcampus/client/gateway/AuthClient.java	(date 1693281920578)
@@ -37,15 +37,8 @@
         }
 
         if (response.get().getStatus().equals("success")) {
-            User user = new User();
-            Map<String, String> data = (Map<String, String>) ((Map<String, Object>) response.get().getData()).get("user");
-            user.setCardNum(Integer.parseInt(data.get("cardNum")));
-            user.setName(data.get("name"));
-            user.setGender(Gender.valueOf(data.get("gender")));
-            user.setPhone(data.get("phone"));
-            user.setEmail(data.get("email"));
-            user.setRoles(data.get("roles").split(","));
-            return user;
+            Map<String, String> data = (Map<String, String>) response.get().getData();
+            return User.fromMap(data);
         } else {
             return null;
         }
Index: client/src/main/kotlin/app/vcampus/client/scene/StudentStatusScene.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package app.vcampus.client.scene\r\n\r\nimport androidx.compose.foundation.layout.*\r\nimport androidx.compose.foundation.lazy.LazyColumn\r\nimport androidx.compose.material.*\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.Edit\r\nimport androidx.compose.material.icons.filled.Menu\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.rememberCoroutineScope\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.text.TextStyle\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport app.vcampus.client.scene.components.NavShape\r\nimport app.vcampus.client.scene.components.navDrawer\r\nimport app.vcampus.client.scene.components.navDrawerItem\r\nimport app.vcampus.client.viewmodel.StudentStatusViewModel\r\nimport kotlinx.coroutines.launch\r\nimport moe.tlaster.precompose.navigation.Navigator\r\nimport moe.tlaster.precompose.navigation.rememberNavigator\r\nimport moe.tlaster.precompose.viewmodel.viewModel\r\n\r\n@ExperimentalMaterialApi\r\n@Composable\r\nfun StudentStatusScene(\r\n    navi: Navigator\r\n) {\r\n    val viewModel = viewModel(StudentStatusViewModel::class, listOf()) {\r\n        StudentStatusViewModel()\r\n    }\r\n    val coroutineScope = rememberCoroutineScope()\r\n    val scaffoldState = rememberScaffoldState()\r\n\r\n    Scaffold(\r\n        scaffoldState = scaffoldState,\r\n        topBar = {\r\n            TopAppBar(\r\n                title = {\r\n                    Text(\r\n                        text = \"学籍管理\",\r\n                        style = TextStyle(\r\n                            fontSize = 20.sp,\r\n                            lineHeight = 24.sp,\r\n                            fontWeight = FontWeight(600),\r\n                            color = Color(0xFFFFFFFF),\r\n                            letterSpacing = 0.15.sp,\r\n                        )\r\n                    )\r\n                },\r\n                navigationIcon = {\r\n                    IconButton(onClick = { coroutineScope.launch { scaffoldState.drawerState.open() } }) {\r\n                        Icon(Icons.Default.Menu, contentDescription = null)\r\n                    }\r\n                },\r\n                actions = {\r\n                    IconButton(onClick = {}) {\r\n                        Icon(Icons.Default.Edit, contentDescription = null)\r\n                    }\r\n                },\r\n            )\r\n        },\r\n        drawerShape = NavShape(0.dp, 0.3f),\r\n        drawerContent = {\r\n            navDrawer(navi)\r\n        }\r\n    ) {\r\n        Box(Modifier.fillMaxSize()) {\r\n            Box(Modifier.width(800.dp).align(Alignment.TopCenter)) {\r\n                LazyColumn {\r\n                    item {\r\n                        Spacer(Modifier.height(50.dp))\r\n                        Text(\r\n                            text = \"晚上好，测试用户！\",\r\n                            style = TextStyle(\r\n                                fontSize = 34.sp,\r\n                                lineHeight = 36.sp,\r\n                                fontWeight = FontWeight(400),\r\n                                color = Color(0xDE000000),\r\n                            )\r\n                        )\r\n                        Text(\r\n                            text = \"今天想做些什么？\",\r\n                            style = TextStyle(\r\n                                fontSize = 14.sp,\r\n                                lineHeight = 20.sp,\r\n                                fontWeight = FontWeight(400),\r\n                                color = Color(0x99000000),\r\n                                letterSpacing = 0.25.sp,\r\n                            )\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client/src/main/kotlin/app/vcampus/client/scene/StudentStatusScene.kt b/client/src/main/kotlin/app/vcampus/client/scene/StudentStatusScene.kt
--- a/client/src/main/kotlin/app/vcampus/client/scene/StudentStatusScene.kt	(revision 4311a3413f5bc158badfe6df8ab0ac20d022ebf5)
+++ b/client/src/main/kotlin/app/vcampus/client/scene/StudentStatusScene.kt	(date 1693281920581)
@@ -1,13 +1,12 @@
 package app.vcampus.client.scene
 
+import DatePicker
 import androidx.compose.foundation.layout.*
 import androidx.compose.foundation.lazy.LazyColumn
 import androidx.compose.material.*
 import androidx.compose.material.icons.Icons
-import androidx.compose.material.icons.filled.Edit
-import androidx.compose.material.icons.filled.Menu
-import androidx.compose.runtime.Composable
-import androidx.compose.runtime.rememberCoroutineScope
+import androidx.compose.material.icons.filled.*
+import androidx.compose.runtime.*
 import androidx.compose.ui.Alignment
 import androidx.compose.ui.Modifier
 import androidx.compose.ui.graphics.Color
@@ -15,14 +14,187 @@
 import androidx.compose.ui.text.font.FontWeight
 import androidx.compose.ui.unit.dp
 import androidx.compose.ui.unit.sp
-import app.vcampus.client.scene.components.NavShape
-import app.vcampus.client.scene.components.navDrawer
-import app.vcampus.client.scene.components.navDrawerItem
+import app.vcampus.client.scene.components.NavRail
+import app.vcampus.client.scene.components.TopBar
+import app.vcampus.client.scene.components.pageTitle
 import app.vcampus.client.viewmodel.StudentStatusViewModel
 import kotlinx.coroutines.launch
 import moe.tlaster.precompose.navigation.Navigator
-import moe.tlaster.precompose.navigation.rememberNavigator
 import moe.tlaster.precompose.viewmodel.viewModel
+import java.text.SimpleDateFormat
+import java.util.*
+
+@Composable
+fun StudentStatusForStudent(viewModel: StudentStatusViewModel) {
+    var familyName by viewModel.familyName
+    var givenName by viewModel.givenName
+    var gender by viewModel.gender
+    var birthDate by viewModel.birthDate
+    var major by viewModel.major
+    var school by viewModel.school
+    var cardNumber by viewModel.cardNumber
+    var studentNumber by viewModel.studentNumber
+
+    var showDatePicker by remember { mutableStateOf(false) }
+
+    val sdf = SimpleDateFormat("yyyy年MM月dd日")
+
+    if (showDatePicker) {
+        DatePicker(
+            initDate = Date(),
+            onDismissRequest = { showDatePicker = false },
+            onDateSelect = {
+                birthDate = it
+                showDatePicker = false
+            },
+            minYear = 1900
+        )
+    }
+
+    LazyColumn {
+        item {
+            Spacer(Modifier.height(50.dp))
+            pageTitle("个人学籍信息", "查看修改个人学籍信息")
+        }
+
+        item {
+            Spacer(Modifier.height(20.dp))
+            Row(Modifier.fillMaxWidth()) {
+                Box(Modifier.fillParentMaxWidth(0.25F).padding(5.dp)) {
+                    OutlinedTextField(
+                        value = familyName,
+                        onValueChange = { familyName = it },
+                        label = { Text("姓") },
+                        isError = familyName == "",
+                        trailingIcon = {
+                            if (familyName == "")
+                                Icon(Icons.Filled.Error,"error", tint = MaterialTheme.colors.error)
+                        },
+                    )
+                }
+
+                Box(Modifier.fillParentMaxWidth(0.25F).padding(5.dp)) {
+                    OutlinedTextField(
+                        value = givenName,
+                        onValueChange = { givenName = it },
+                        label = { Text("名") },
+                        isError = givenName == "",
+                        trailingIcon = {
+                            if (givenName == "")
+                                Icon(Icons.Filled.Error,"error", tint = MaterialTheme.colors.error)
+                        },
+                    )
+                }
+
+                Box(Modifier.fillParentMaxWidth(0.20F).padding(5.dp)) {
+                    OutlinedTextField(
+                        value = gender,
+                        onValueChange = { gender = it },
+                        label = { Text("性别") },
+                        isError = gender == "",
+                        trailingIcon = {
+                            if (gender == "")
+                                Icon(Icons.Filled.Error,"error", tint = MaterialTheme.colors.error)
+                        },
+                    )
+                }
+
+                Box(Modifier.fillParentMaxWidth(0.30F).padding(5.dp)) {
+                    OutlinedTextField(
+                        value = sdf.format(birthDate),
+                        onValueChange = {},
+                        label = { Text("出生日期") },
+                        readOnly = true,
+                        trailingIcon = {
+                            IconButton(onClick = {
+                                showDatePicker = true
+                            }) {
+                                Icon(Icons.Default.ExpandMore, "")
+                            }
+                        }
+                    )
+                }
+            }
+
+            Spacer(Modifier.height(10.dp))
+
+            Row {
+                Box(Modifier.fillParentMaxWidth(0.5F).padding(5.dp)) {
+                    OutlinedTextField(
+                        value = major,
+                        onValueChange = { major = it },
+                        label = { Text("专业") },
+                        modifier = Modifier.fillMaxWidth(),
+                        isError = major == "",
+                        trailingIcon = {
+                            if (major == "")
+                                Icon(Icons.Filled.Error,"error", tint = MaterialTheme.colors.error)
+                        },
+                    )
+                }
+
+                Box(Modifier.fillParentMaxWidth(0.5F).padding(5.dp)) {
+                    OutlinedTextField(
+                        value = school,
+                        onValueChange = { school = it },
+                        label = { Text("学院") },
+                        modifier = Modifier.fillMaxWidth(),
+                        isError = school == "",
+                        trailingIcon = {
+                            if (school == "")
+                                Icon(Icons.Filled.Error,"error", tint = MaterialTheme.colors.error)
+                        },
+                    )
+                }
+            }
+
+            Spacer(Modifier.height(10.dp))
+
+            Row {
+                Box(Modifier.fillParentMaxWidth(0.5F).padding(5.dp)) {
+                    OutlinedTextField(
+                        value = cardNumber,
+                        onValueChange = { cardNumber = it },
+                        label = { Text("一卡通号") },
+                        modifier = Modifier.fillMaxWidth(),
+                        isError = cardNumber == "",
+                        trailingIcon = {
+                            if (cardNumber == "")
+                                Icon(Icons.Filled.Error,"error", tint = MaterialTheme.colors.error)
+                        },
+                    )
+                }
+
+                Box(Modifier.fillParentMaxWidth(0.5F).padding(5.dp)) {
+                    OutlinedTextField(
+                        value = studentNumber,
+                        onValueChange = { studentNumber = it },
+                        label = { Text("学号") },
+                        modifier = Modifier.fillMaxWidth(),
+                        isError = studentNumber == "",
+                        trailingIcon = {
+                            if (studentNumber == "")
+                                Icon(Icons.Filled.Error,"error", tint = MaterialTheme.colors.error)
+                        },
+                    )
+                }
+            }
+
+            Spacer(Modifier.height(20.dp))
+
+            Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.End) {
+                Button(onClick = {}) {
+                    Row {
+                        Icon(Icons.Default.Done, "")
+                        Spacer(Modifier.width(5.dp))
+                        Text("保存修改")
+                    }
+                }
+            }
+        }
+    }
+}
+
 
 @ExperimentalMaterialApi
 @Composable
@@ -38,64 +210,16 @@
     Scaffold(
         scaffoldState = scaffoldState,
         topBar = {
-            TopAppBar(
-                title = {
-                    Text(
-                        text = "学籍管理",
-                        style = TextStyle(
-                            fontSize = 20.sp,
-                            lineHeight = 24.sp,
-                            fontWeight = FontWeight(600),
-                            color = Color(0xFFFFFFFF),
-                            letterSpacing = 0.15.sp,
-                        )
-                    )
-                },
-                navigationIcon = {
-                    IconButton(onClick = { coroutineScope.launch { scaffoldState.drawerState.open() } }) {
-                        Icon(Icons.Default.Menu, contentDescription = null)
-                    }
-                },
-                actions = {
-                    IconButton(onClick = {}) {
-                        Icon(Icons.Default.Edit, contentDescription = null)
-                    }
-                },
-            )
-        },
-        drawerShape = NavShape(0.dp, 0.3f),
-        drawerContent = {
-            navDrawer(navi)
+            TopBar("学籍管理")
         }
     ) {
-        Box(Modifier.fillMaxSize()) {
-            Box(Modifier.width(800.dp).align(Alignment.TopCenter)) {
-                LazyColumn {
-                    item {
-                        Spacer(Modifier.height(50.dp))
-                        Text(
-                            text = "晚上好，测试用户！",
-                            style = TextStyle(
-                                fontSize = 34.sp,
-                                lineHeight = 36.sp,
-                                fontWeight = FontWeight(400),
-                                color = Color(0xDE000000),
-                            )
-                        )
-                        Text(
-                            text = "今天想做些什么？",
-                            style = TextStyle(
-                                fontSize = 14.sp,
-                                lineHeight = 20.sp,
-                                fontWeight = FontWeight(400),
-                                color = Color(0x99000000),
-                                letterSpacing = 0.25.sp,
-                            )
-                        )
-                    }
+        Row {
+            NavRail(navi, "/student_status")
+            Box(Modifier.fillMaxSize()) {
+                Box(Modifier.width(800.dp).align(Alignment.TopCenter)) {
+                    StudentStatusForStudent(viewModel)
                 }
             }
         }
-
     }
 }
\ No newline at end of file
